def zeus_running?

end

def spring_running?

end

def command_prefix
  return 'zeus ' if zeus_running?
  return 'spring ' if spring_running?
end

guard 'bundler' do
  watch('Gemfile')
<% if engine? -%>
  watch(/^.+\.gemspec/)
<% end -%>
end

guard 'migrate', run_on_start: true, seed: true, cmd: '<% if options[:zeus] -%>zeus<% elsif spring? -%>spring<% end -%> rake ', reset: false do
  watch(%r{^db/migrate/(\d+).+\.rb})
  watch('db/seeds.rb')
end
<% if options[:jshint] -%>
guard :jshintrb do
  watch(%r{^app/assets/javascripts/.+.js})
  watch(%r{^spec/javascripts/.+.js})
end
<% end -%>
<% if options[:brakeman] -%>
guard 'brakeman', run_on_start: true, quiet: true do
  watch(%r{^app/.+\.(erb|haml|rhtml|rb)$})
  watch(%r{^config/.+\.rb$})
  watch(%r{^lib/.+\.rb$})
  watch('Gemfile')
end
<% end -%>
<% if options[:rspec] -%>
guard :rspec, cmd: '<% if options[:zeus] -%>zeus<% elsif spring? -%>spring<% else -%>bundle exec<% end -%> rspec  --tag ~@i18n_unused --tag ~@slow', results_file: 'tmp/guard_rspec_results.txt', all_after_pass: true, all_on_start: true do
  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/lib/\#{m[1]}_spec.rb" }
  watch('spec/spec_helper.rb')  { 'spec' }

  # Rails example
  watch(%r{^app/(.+)\.rb$})                           { |m| "spec/\#{m[1]}_spec.rb" }
  watch(%r{^app/(.*)(\.erb|\.haml|\.slim)$})          { |m| "spec/\#{m[1]}\#{m[2]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { |m| ["spec/routing/\#{m[1]}_routing_spec.rb", "spec/\#{m[2]}s/\#{m[1]}_\#{m[2]}_spec.rb", "spec/acceptance/\#{m[1]}_spec.rb"] }
  watch(%r{^spec/support/(.+)\.rb$})                  { 'spec' }
  watch('config/routes.rb')                           { 'spec/routing' }
  watch('app/controllers/application_controller.rb')  { 'spec/controllers' }

  # Capybara features specs
  watch(%r{^app/views/(.+)/.*\.(erb|haml|slim)$})     { |m| "spec/features/\#{m[1]}_spec.rb" }

  # Turnip features and steps
  watch(%r{^spec/acceptance/(.+)\.feature$})
  watch(%r{^spec/acceptance/steps/(.+)_steps\.rb$}) { |m| Dir[File.join("**/\#{m[1]}.feature")][0] || 'spec/acceptance' }
end
<% end -%>
<% if options[:reek] -%>
guard 'reek' do
  watch(/^(app|lib).+\.(rb|reek)$/)
end
<% end -%>
<% if options['rails-best-practices'] -%>
guard 'rails_best_practices' do
  watch(%r{^app/(.+)\.rb$})
end
<% end -%>
<% if options[:rubocop] -%>
guard :rubocop, cli: ' -a -D --rails' do
  watch(/.+\.rb$/)
  watch(%r{(?:.+/)?\.rubocop\.yml$}) { |m| File.dirname(m[0]) }
end
<% end -%>
<% if options['consistency-fail'] -%>
guard 'consistency_fail', environment: 'development' do
  watch(%r{^app/model/(.+)\.rb})
  watch(%r{^db/schema.rb})
end
<% end -%>
<% if options[:cucumber] -%>
guard 'cucumber', cmd: '<% if options[:zeus] -%>zeus<% elsif spring? -%>spring<% end -%> cucumber', cmd_additional_args: '--profile guard  --format progress' do
  watch(%r{^features/.+\.feature$})
  watch(%r{^features/support/.+$}) { 'features' }
  watch(%r{^features/step_definitions/(.+)_steps\.rb$}) { |m| Dir[File.join("**/#{m[1]}.feature")][0] || 'features' }
end
<% end -%>
<% if options[:livereload] -%>
guard 'livereload' do
  watch(%r{app/views/.+\.(erb|haml|slim)$})
  watch(%r{app/helpers/.+\.rb})
  watch(%r{public/.+\.(css|js|html)})
  watch(%r{config/locales/.+\.yml})
  # Rails Assets Pipeline
  watch(%r{(app|vendor)(/assets/\w+/(.+\.(css|js|html))).*}) { |m| "/assets/#{m[3]}" }
end
<% end -%>


